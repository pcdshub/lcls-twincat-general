<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ECATAutoRestart" Id="{7eb4a159-5b39-429e-b4d6-be42c06ba58e}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_ECATAutoRestart
VAR_INPUT
    sNetId          : T_AmsNetId;
    nSlaveAddr      : UINT;
    bEnable 	    : BOOL;
    nMaxErrorCount  : INT := 5; // Stop Trying to Change state after this many tries
END_VAR
VAR_IN_OUT
END_VAR
VAR_OUTPUT
    bError 		: BOOL;
    nErrorId	: UDINT;
END_VAR
VAR
    nStateMachineState      : INT := 1;
    nErrorCount             : INT := 0;
    bStopTrying             : BOOL;

    fbgetSlaveState         : FB_EcGetSlaveState;
    fbsetSlaveState         : FB_EcSetSlaveState;
    fbLogger		        : FB_LogMessage := (eSubsystem:= E_Subsystem.FIELDBUS);
    bLog : BOOL;
    sLogMessage : T_MaxString;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
StateMachine(bEnable:=bEnable,
    bfbGetBusy := fbgetSlaveState.bBusy,
    bfbGetUpdatedState => fbgetSlaveState.bExecute,
    bfbGetError := fbgetSlaveState.bError,
    nCurretState := fbgetSlaveState.state.deviceState,
    nNextState => fbsetSlaveState.reqState,
    sLogMessage=> sLogMessage,
    bLog=> bLog,
    bSetNextState=> fbsetSlaveState.bExecute,
    bfbSetBusy := fbsetSlaveState.bBusy,
    bfbSetError := fbsetSlaveState.bError,
    bError => bError);

fbgetSlaveState(sNetId:= sNetId, nSlaveAddr:= nSlaveAddr);
fbsetSlaveState(sNetId:=sNetId, nSlaveAddr:=nSlaveAddr, tTimeout:=T#5s);

IF bLog THEN
    fbLogger(sMsg:=sLogMessage, eSevr:=TcEventSeverity.Info);
END_IF

IF bError OR bStopTrying THEN
    bError := TRUE;
    IF fbgetSlaveState.bError OR bStopTrying THEN
           nErrorId := fbgetSlaveState.nErrId;
    ELSIF fbsetSlaveState.bError OR bStopTrying THEN
        nErrorId := fbsetSlaveState.nErrId;
    END_IF
ELSE
    bError := FALSE;
    nErrorId := 0 ;
END_IF

]]></ST>
    </Implementation>
    <Method Name="StateMachine" Id="{4f307c1c-6406-4ed4-adea-e4e6e46fd62f}">
      <Declaration><![CDATA[
METHOD StateMachine
VAR_INPUT
    bEnable                 : BOOL;
    nCurretState            : WORD;

    bfbGetBusy              : BOOL;
    bfbGetError				: BOOL;

    bfbSetBusy              : BOOL;
    bfbSetError             : BOOL;

END_VAR
VAR_OUTPUT
    bfbGetUpdatedState      : BOOL;
    bSetNextState           : BOOL;
    nNextState              : WORD;

    sLogMessage             : T_MaxString;
    bLog                    : BOOL;
    bError					: BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE nStateMachineState OF
    0 :
        nErrorCount := 0;
        bStopTrying := FALSE;

        IF bEnable THEN
            nStateMachineState := 1;
        END_IF

    1 : // Monitor State

        IF NOT bEnable THEN
            nStateMachineState := 0;
        END_IF

        // Get Updated terminal State
        IF NOT bfbGetBusy THEN
            bfbGetUpdatedState := TRUE;
        ELSE
            bfbGetUpdatedState := FALSE;
        END_IF

        IF bfbGetError THEN
            bError := TRUE;
            nStateMachineState := 3;
        ELSE
            // Only Try to Update when We have good state reading.
            // If not in OP try to Move into Another State
            IF nCurretState <> EC_DEVICE_STATE_OP AND bEnable AND NOT bStopTrying AND NOT bfbGetError THEN
                nStateMachineState := 2;
            END_IF

            IF nCurretState = EC_DEVICE_STATE_OP AND NOT bfbGetError THEN
                // WE ARE IN OP
                nNextState := nCurretState;
                nErrorCount := 0;
                bStopTrying := FALSE;
                bError := FALSE;
            END_IF
        END_IF


     2 : // FIND NEXT STATE AND SIGNAL TO MOVE
        CASE nCurretState OF
            EC_DEVICE_STATE_BOOTSTRAP:
                nNextState := EC_DEVICE_STATE_INIT;
                sLogMessage := 'TRYING TO GO FROM BOOTSTRAP TO INIT';
                bLog := TRUE;
            EC_DEVICE_STATE_INIT:
                nNextState := EC_DEVICE_STATE_PREOP;
                sLogMessage := 'TRYING TO GO FROM INIT TO PREOP';
                bLog := TRUE;
            EC_DEVICE_STATE_PREOP:
                nNextState := EC_DEVICE_STATE_SAFEOP;
                sLogMessage := 'TRYING TO GO FROM PREOP TO SAFEOP';
                bLog := TRUE;
            EC_DEVICE_STATE_SAFEOP:
                nNextState := EC_DEVICE_STATE_OP;
                sLogMessage := 'TRYING TO GO FROM SAFEOP TO OP';
                bLog := TRUE;
        END_CASE

        nStateMachineState := 3;
        // Signal to try to move to next State
        bSetNextState := TRUE;

      3 : // Wait to Finish Trying to Move to Next State

         IF bfbSetError OR bfbGetError THEN
            bError := TRUE;
            nErrorCount := nErrorCount + 1;
            IF nErrorCount = nMaxErrorCount THEN
                bStopTrying := TRUE;
            END_IF
         END_IF

         IF NOT bfbSetBusy THEN
            bSetNextState := FALSE;
            nStateMachineState := 1;
         END_IF


END_CASE





]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>