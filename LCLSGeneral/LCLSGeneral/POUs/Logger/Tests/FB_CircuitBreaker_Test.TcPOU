<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CircuitBreaker_Test" Id="{5e87281d-9fdb-4ef5-acce-a04e585b28ee}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_CircuitBreaker_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AutoReset();
SingleBadLogger();
DeathByManySmall();
]]></ST>
    </Implementation>
    <Method Name="AutoReset" Id="{44b1b2f0-71a2-4aa9-8511-faaf8e5dd638}">
      <Declaration><![CDATA[METHOD AutoReset
VAR_INPUT
END_VAR
VAR_INST
    fbLog : FB_LogMessage := (
        bEnableAutoReset:=TRUE,
        tTripResetPeriod := T#5s);

    //Auto reset test
    fbTonAutoResetTest : TON;

    {attribute 'analysis' := '-27'}
    bInit : BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Test that the CB resets itself after a cooldown period *)
TEST('AutoReset');
IF bInit THEN
    fbLog.CircuitBreaker();
    WRITE_PROTECTED_BOOL(ADR(fbLog.bTripped), TRUE);
    WRITE_PROTECTED_BOOL(ADR(fbLog.bLocalTripped), TRUE);
    fbLog.CircuitBreaker();
    fbLog.CircuitBreaker();
    bInit := FALSE;
END_IF

fbTonAutoResetTest(IN:=NOT bInit, PT:=T#6s);

IF fbTonAutoResetTest.Q THEN

    fbLog.CircuitBreaker();

    AssertFalse(fbLog.bTripped,
        'Circuit breaker should be reset automatically');

    TEST_FINISHED_NAMED('AutoReset');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="DeathByManySmall" Id="{16c5f3eb-2b6e-4010-9205-02c2d0e7536b}">
      <Declaration><![CDATA[METHOD DeathByManySmall
VAR_INPUT
END_VAR
VAR

END_VAR
VAR_INST
    fbLogNoisy : FB_LogMessage;
    fbTonNoisy : TON := (PT:=T#50ms); //50ms is > the local trip threshold default of 1ms
    fbLogNice : FB_LogMessage := (tTrickleTripThreshold:=T#2s);
    fbTonNice : TON := (PT:=T#5s);
    fbTonTrickle : TON := (PT:= GVL_Logger.ctTrickleTripTime + T#1s);
    fbLogHandler : FB_LogHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ManySmall');
// Create a condition where
// a few loggers did their thing, while keeping under the
// local logging rate limit until the global trickle trip
// was triggered. Then verify only those loggers that
// were just a little too noisy, would trip off, while others stayed up.

fbLogHandler.CircuitBreaker();

// Call this guy every 50ms or so.
fbTonNoisy(IN := NOT fbTonNoisy.Q);
IF fbTonNoisy.Q THEN
    fbLogNoisy.CircuitBreaker();
END_IF

// Call this guy every 5s or so
fbTonNice(IN := NOT fbTonNoisy.Q);
IF fbTonNice.Q THEN
    fbLogNice.CircuitBreaker();
END_IF

fbTonTrickle(IN:=TRUE);
IF fbTonTrickle.Q THEN
    AssertTrue(fbLogNoisy.bLocalTrickleTripped AND NOT fbLogNice.bLocalTrickleTripped,
            'Only Noisy should be tripped.');
    TEST_FINISHED_NAMED('ManySmall');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SingleBadLogger" Id="{f5c98f80-0db1-4516-a281-6aaf1f206004}">
      <Declaration><![CDATA[METHOD SingleBadLogger
VAR_INPUT
END_VAR
VAR
    nIdx : UINT;
END_VAR
VAR_INST
    fbLog : FB_LogMessage := (
        bEnableAutoReset:=TRUE,
        tTripResetPeriod := T#5s);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_ResetCircuitBreakerGlobals();

(* In this scenario, a logger trips off because it has been called too many times
in one cycle, leading to a large excess of messages.
*)
TEST('LocalFastTrip');
    FOR nIdx := 0 TO GVL_LOGGER.cnMinTimeViolationAcceptable + 1 DO
        fbLog.CircuitBreaker();
    END_FOR

    AssertTrue(fbLog.bLocalTripped AND NOT fbLog.bLocalTrickleTripped,
        'Only local trip should occur in these conditions');
TEST_FINISHED();




]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>