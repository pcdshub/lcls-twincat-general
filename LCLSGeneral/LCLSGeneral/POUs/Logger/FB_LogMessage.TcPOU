<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LogMessage" Id="{0893f9f8-65e8-4db6-822f-019a7a161c6c}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK FB_LogMessage
VAR_INPUT
    sMsg			: T_MaxString; 					// Message to send
    eSevr			: TcEventSeverity	:= TcEventSeverity.Verbose;
    eSubsystem		: E_Subsystem; 					// Subsystem
    sJson			: STRING(7000)	:= '{}';		// JSON to add to the message

    //Circuit breaker settings
    nMinTimeViolationAcceptable : INT := GVL_Logger.cnMinTimeViolationAcceptable; // How many times the min. time can be violated before the CB trips
    tLocalTripThreshold : TIME := GVL_Logger.ctLocalTripThreshold; // Minimum time between calls allowed, pairs with nMinTimeViolationAcceptable
    tTrickleTripThreshold : TIME := GVL_Logger.ctLocalTrickleTripThreshold; // Trickle trip, activated by global threshold, should be >> LocalTripThreshold
    tTripResetPeriod : TIME := GVL_Logger.ctTripResetPeriod; // Time for auto-reset
    bEnableAutoReset : BOOL := TRUE; //Enable circuit breaker auto-reset (true by default)
END_VAR

VAR_OUTPUT
END_VAR

VAR
    bInitialized		:	BOOL := FALSE;
    bInitFailed			:	BOOL := FALSE;
    sSubsystemSource	:	STRING;
    fbMessage			:	REFERENCE TO FB_TcMessage;
    afbMessages 			:	ARRAY [0..4] OF FB_TcMessage;
    fbSource 			:	FB_TcSourceInfo;
    ipResultMessage	 	:	I_TcMessage;
    hr 					:	HRESULT;
    hrLastInternalError :	HRESULT;
    eTraceLevel 		:	TcEventSeverity := TcEventSeverity.Verbose;
    bFirstCall : BOOL := TRUE;

    {attribute 'instance-path'}
    {attribute 'noinit'}
    sPath				:	T_MaxString;

    // Circuit breaker
    ///////////////////////////////
        nTimesViolated : INT;

        nLastCallTime : ULINT;
        nCurrentCallTime : ULINT;
        nDeltaSinceLastCall : ULINT;

        nWhenTripsCleared : ULINT;
        fbFtrigTrippedReleased : F_TRIG;

        bLocalTrickleTripped : BOOL;
        bLocalTripped : BOOL;

        {attribute 'pytmc' := '
            pv: Tripped
            io: i
            field: DESC Log message FB tripped
        '}
        bTripped    :    BOOL; // Won't emit messages if true
        {attribute 'pytmc' := '
            pv: Reset
            io: o
            field: DESC Rising-edge reset of trip
        '}
        bResetBreaker : BOOL;
        fbRtrigResetBreaker : R_TRIG;

        fbRtrigTripped : R_TRIG;
    ////////////////////////////////////////////

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized AND NOT bInitFailed THEN

    hr := afbMessages[TC_EVENTS.LCLSGeneralEventClass.Verbose.nEventId].CreateEx(TC_EVENTS.LCLSGeneralEventClass.Verbose, 0 (*fbSource*) );
    IF FAILED(hr) THEN
        bInitFailed := TRUE;
        hrLastInternalError := hr;
    END_IF

    hr := afbMessages[TC_EVENTS.LCLSGeneralEventClass.Warning.nEventId].CreateEx(TC_EVENTS.LCLSGeneralEventClass.Warning, 0 (*fbSource*) );
    IF FAILED(hr) THEN
        bInitFailed := TRUE;
        hrLastInternalError := hr;
    END_IF

    hr := afbMessages[TC_EVENTS.LCLSGeneralEventClass.Info.nEventId].CreateEx(TC_EVENTS.LCLSGeneralEventClass.Info, 0 (*fbSource*) );
    IF FAILED(hr) THEN
        bInitFailed := TRUE;
        hrLastInternalError := hr;
    END_IF

    hr := afbMessages[TC_EVENTS.LCLSGeneralEventClass.Error.nEventId].CreateEx(TC_EVENTS.LCLSGeneralEventClass.Error, 0 (*fbSource*) );
    IF FAILED(hr) THEN
        bInitFailed := TRUE;
        hrLastInternalError := hr;
    END_IF

    hr := afbMessages[TC_EVENTS.LCLSGeneralEventClass.Critical.nEventId].CreateEx(TC_EVENTS.LCLSGeneralEventClass.Critical, 0 (*fbSource*) );
    IF FAILED(hr) THEN
        bInitFailed := TRUE;
        hrLastInternalError := hr;
    END_IF

    IF bInitFailed THEN
        ADSLOGSTR(
            msgCtrlMask := ADSLOG_MSGTYPE_ERROR,
            msgFmtStr   := '[LOGGER] Initialization failed in %s',
            strArg      := sPath,
        );
    ELSE
        bInitialized := TRUE;
    END_IF
END_IF

IF bInitFailed THEN
    RETURN;
END_IF


///////////////////////////////////////
// Log message circuit breaker

CircuitBreaker();
IF bTripped AND NOT fbRtrigTripped.Q THEN RETURN; END_IF // Pass on the first one to deliver the message we're going silent

///////////////////////////////////////////////////////////



// Map the message severity to the LCLSGeneralEventClass:
CASE eSevr OF
    TcEventSeverity.Verbose: 	fbMessage REF= afbMessages[TC_EVENTS.LCLSGeneralEventClass.Verbose.nEventId];
    TcEventSeverity.Warning:	fbMessage REF= afbMessages[TC_EVENTS.LCLSGeneralEventClass.Warning.nEventId];
    TcEventSeverity.Info:		fbMessage REF= afbMessages[TC_EVENTS.LCLSGeneralEventClass.Info.nEventId];
    TcEventSeverity.Error:		fbMessage REF= afbMessages[TC_EVENTS.LCLSGeneralEventClass.Error.nEventId];
    TcEventSeverity.Critical:	fbMessage REF= afbMessages[TC_EVENTS.LCLSGeneralEventClass.Critical.nEventId];
    ELSE
        RETURN;
END_CASE

CASE eSubsystem OF
    E_Subsystem.FIELDBUS: 	sSubsystemSource := '/Fieldbus';
    E_Subsystem.MOTION: 	sSubsystemSource := '/Motion';
    E_Subsystem.MPS: 		sSubsystemSource := '/MPS';
    E_Subsystem.SDS: 		sSubsystemSource := '/SDS';
    E_Subsystem.VACUUM:		sSubsystemSource := '/Vacuum';
    E_Subsystem.OPTICS:     sSubsystemSource := '/Optics';
    ELSE
        sSubsystemSource := '/Unknown';
END_CASE

// Clearing the source here will clear the event GUID, causing the message to not be resolved.
// However, we can change the name as desired:
//fbSource.Clear();
fbSource.sName := CONCAT(sPath, sSubsystemSource);

ipResultMessage := fbMessage;
hr := fbMessage.CreateEx(stEventEntry:=ipResultMessage.stEventEntry, ipSourceInfo:=fbSource);

// This is where the message text gets appended:
fbMessage.ipArguments.Clear();

IF fbRtrigTripped.Q THEN
   fbMessage.ipArguments.AddString('Logging circuit breaker tripped, this will be the last message from this element for a while...');
ELSIF NOT bTripped THEN
    fbMessage.ipArguments.AddString(sMsg);
END_IF


IF LEN(sJson) = 0 THEN
    // Ensure there's a valid JSON string here
    sJson := '{}';
END_IF

fbMessage.SetJsonAttribute(sJson);

// For a final format of:
// 'Path.to.FB_LogMessage/Subsystem': {Unknown,Error,Warning,Verbose} (message)
// We want to send 1 more message when we trip
IF NOT FAILED(hr) AND fbMessage.eSeverity >= eTraceLevel AND (NOT bTripped OR fbRtrigTripped.Q) THEN
    hr := fbMessage.Send(0);
END_IF

IF FAILED(hr) THEN
    hrLastInternalError := hr;
END_IF]]></ST>
    </Implementation>
    <Action Name="CircuitBreaker" Id="{e49ad5c6-bab2-45f9-a152-f716dee29a1a}">
      <Implementation>
        <ST><![CDATA[
GVL_Logger.nGlobAccEvents := GVL_Logger.nGlobAccEvents + 1;

nCurrentCallTime := F_GetTaskTime();
IF bFirstCall THEN
    nDeltaSinceLastCall := 16#FFFF_FFFF;
    bFirstCall := FALSE;
ELSE
   nDeltaSinceLastCall := nCurrentCallTime - nLastCallTime;
END_IF

nLastCallTime := nCurrentCallTime;

fbFtrigTrippedReleased(CLK:=bLocalTripped OR bLocalTrickleTripped);
IF fbFtrigTrippedReleased.Q THEN
    nWhenTripsCleared := nCurrentCallTime;
END_IF
fbRtrigResetBreaker(CLK:=bResetBreaker OR
                bEnableAutoReset AND (nCurrentCallTime - nWhenTripsCleared > F_TIME_TO_100NS(tTripResetPeriod)) );

IF fbRtrigResetBreaker.Q THEN
   // bLocalTrickleTripped := FALSE;
    //bLocalTripped := FALSE;
    bTripped := FALSE;
    //nTimesViolated := 0;
END_IF

bResetBreaker := FALSE;

IF nDeltaSinceLastCall < F_TIME_TO_100NS(tLocalTripThreshold) THEN
    nTimesViolated := MIN(nTimesViolated + 1, nMinTimeViolationAcceptable+1);
ELSE
    nTimesViolated := MAX(nTimesViolated - 1, 0);
END_IF

bLocalTripped := nTimesViolated > nMinTimeViolationAcceptable;

bLocalTrickleTripped := nDeltaSinceLastCall < F_TIME_TO_100NS(tTrickleTripThreshold) AND GVL_LOGGER.bTrickleTripped;

bTripped S= bLocalTrickleTripped OR bLocalTripped;
fbRtrigTripped(CLK:=bTripped);

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>