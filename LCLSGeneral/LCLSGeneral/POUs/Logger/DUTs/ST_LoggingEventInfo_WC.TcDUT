<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <DUT Name="ST_LoggingEventInfo_WC" Id="{c7089d6f-7fa7-426b-9d50-1a010ea23a13}">
    <Declaration><![CDATA[TYPE ST_LoggingEventInfo_WC :
STRUCT
    (*
        Message or Alarm{Cleared,Confirmed,Raised} event information

        ** Working copy - to be used for the pinned ST_LoggingEventInfo **
        * The process for updating this type is as follows:
            1. Copy this structure and rename to ST_LoggingEventInfo
            2. Remove the working copy notes section
            3. Pin the global data type
        ** End of working copy information **

        Note that elements here do not follow the usual Hungarian notation /
        variable-type-prefixing naming convention due to the member names being
        used directly in the generation of the JSON document.
    *)

    {attribute 'pytmc' := '
        pv: Schema
        io: i
        field: DESC Schema string
    '}
    sSchema		:	STRING := 'twincat-event-0';

    {attribute 'pytmc' := '
        pv: Timestamp
        io: i
        field: DESC Unix timestamp
    '}
      fTs			:	LREAL;

      {attribute 'pytmc' := '
        pv: Hostname
        io: i
        field: DESC PLC Hostname
    '}
      sPlc			:	STRING;

    {attribute 'pytmc' := '
        pv: Severity
        io: i
        field: DESC TcEventSeverity
        field: ZRST Verbose
        field: ONST Info
        field: TWST Warning
        field: THST Error
    '}
    eSeverity	:	TcEventSeverity;

    {attribute 'pytmc' := '
        pv: MessageID
        io: i
        field: DESC TwinCAT Message ID
    '}
    nId			:	UDINT;

    {attribute 'pytmc' := '
        pv: EventClass
        io: i
        field: DESC TwinCAT Event class
    '}
    sEvent_class		:	STRING;

    {attribute 'pytmc' := '
        pv: Message
        io: i
    '}
    sMsg				: STRING(255);
    // This is actually: T_MaxString
    // which has been expanded due to requirements for pinning global data types.

    {attribute 'pytmc' := '
        pv: Source
        io: i
    '}
    sSource			: STRING(255);
    // This is actually: STRING(Tc3_EventLogger.ParameterList.cSourceNameSize - 1)
    // which has been expanded due to requirements for pinning global data types.

    {attribute 'pytmc' := '
        pv: EventType
        io: i
        field: DESC The event type
    '}
    eEvent_type	:	 E_LogEventType;

    {attribute 'pytmc' := '
        pv: MessageJSON
        io: i
        field: DESC Metadata with the message
    '}
    sJson 		:	STRING(10000);
    (*
    NOTE: this JSON gets inserted as an escaped string in the "json" key.
    TODO: it may be possible to use `fbJson.AddRawObject`, but this would
          require us to switch back to creating the JSON in a more manual
          way with AddKey/AddInt (and such).
    *)

END_STRUCT
END_TYPE]]></Declaration>
  </DUT>
</TcPlcObject>