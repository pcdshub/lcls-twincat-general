<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_XKoyoPLCModbus" Id="{a477c376-dd06-40c3-b569-438369655d9b}" SpecialFunc="None">
    <Declaration><![CDATA[//Facilitates communication between Beckhoff and Koyo PLC over the network.
FUNCTION_BLOCK FB_XKoyoPLCModbus
VAR
    fbKoyo_PLCInputCoilsRx	:	FB_MBReadCoils; //FB for reading the coils from the other PLC
    anKoyo_PLC_CnBits	:	ARRAY [0..20] OF BYTE; //Buffer for coil readbacks
    {attribute 'naming' := 'omit'}
    ftReset	: F_TRIG; //Reset edge sensor
    {attribute 'naming' := 'omit'}
    tonRetry : TON; //Retry timer
    nIndex : INT; //Index for clearing the coil array
END_VAR
VAR_INPUT
    tRetryTime : TIME := T#10S; //Retry time if modbus transaction fails
    sIPAddr	 : STRING[15]; //IP address of the Koyo PLC
END_VAR
VAR_OUTPUT
    bNoPLCResponse : BOOL := TRUE; //Could not reach the PLC if true
    anPLCResponse   : ARRAY [0..20] OF BYTE; //Buffer of coils retrieved from the other PLC
    bError         : BOOL := FALSE; //Transaction or other error
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Look ma' no wires! *)
(* A. Wallace, 2015-7-22
XKoyoPLCModbus

Facilitates communication between Beckhoff and Koyo PLC over the network.

Useful if you don't have time to run a wire. Fairly reliable.

*)

(* Modbus Info for Koyo
Modbus Addresses for
Koyo DL05/06/240/250/260/430/440/450 PLCs
PLC Memory Type		| Modbus start address Decimal (octal) | Function codes
Inputs (X)			  2048 (04000)							2
Special Relays (SP)	  3072 (06000)							2
Outputs (Y)			  2048 (04000)							1, 5, 15
Control Relays (C)	  3072 (06000)							1, 5, 15
Timer Contacts (T)	  6144 (014000)							1, 5, 15
Counter Contacts (CT) 6400 (014400)							1, 5, 15
Stage Status Bits (S) 6144 (012000)							1, 5, 15
*)

(* Begin code *)
// Retry after some time
tonRetry.IN := NOT fbKoyo_PLCInputCoilsRx.bBusy;
tonRetry.PT := tRetryTime;
tonRetry();

ftReset(CLK:=fbKoyo_PLCInputCoilsRx.bBusy);
ftReset();

fbKoyo_PLCInputCoilsRx.bExecute := ftReset.Q OR tonRetry.Q;

fbKoyo_PLCInputCoilsRx(sIPAddr:='i_sIPAddr', nTCPPort:=502, nQuantity:=32, nMBAddr:=8#6000, cbLength:=USINT_TO_UDINT(SIZEOF(anKoyo_PLC_CnBits)),  pDestAddr:=ADR(anKoyo_PLC_CnBits), tTimeout:=T#10S);

//run some error code for modbus
IF fbKoyo_PLCInputCoilsRx.bError THEN
    //if there's a modbus error, set all incoming bits to zero
    {analysis -41} //There are one-liners for resetting an array to zero but they don't comply with 61131
    FOR nIndex := 0 TO USINT_TO_INT(SIZEOF(anKoyo_PLC_CnBits))-1 DO //starts at 0
        anKoyo_PLC_CnBits[nIndex]:=0;
    END_FOR
    {analysis +41}
    bError := TRUE;

ELSIF ftReset.Q AND fbKoyo_PLCInputCoilsRx.cbRead > 0 THEN
    fbKoyo_PLCInputCoilsRx.bExecute := FALSE;
    bNoPLCResponse:= FALSE;
    bError := FALSE;

//more error code cause we didn't manage to read anything
ELSIF fbKoyo_PLCInputCoilsRx.cbRead = 0 THEN
    bError := TRUE;
    bNoPLCResponse:= TRUE;

END_IF

anPLCResponse := anKoyo_PLC_CnBits;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>