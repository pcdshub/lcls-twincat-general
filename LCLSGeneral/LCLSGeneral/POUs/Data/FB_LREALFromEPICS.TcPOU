<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LREALFromEPICS" Id="{1404ab4d-b135-464e-bd7c-11d3ea997668}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Function block to link an analog value from EPICS to an LREAL on the PLC

Usage:

    {attribute 'pytmc' := '
        pv: INTERNAL:RECORD
        link: PV:NAME:TO:LINK:TO
    '}
    fbLinkedValue1 : FB_LREALFromEPICS;

Such that when PV:NAME:TO:LINK:TO changes in EPICS, the INTERNAL:RECORD will be used to
push a value through to the PLC with this function block.

As this block takes care of IOC heartbeat signals and monitors the link and value severity,
the end-user should then only have to look at `.bValid` and `.fValue`. These are guaranteed to
be up-to-date and valid within `tTimeout` seconds.
*)

FUNCTION_BLOCK FB_LREALFromEPICS
VAR_INPUT
    nMaximumValidSeverity		: INT := 1;
END_VAR
VAR_OUTPUT
    bValid				: BOOL;
    fValue				: LREAL;
END_VAR

VAR
    pnValueInvalidate	: POINTER TO ULINT;
    fbValueTimeout		: TON;
    fbSeverityTimeout	: TON;

    fLastValidValue 	: LREAL;
    nLastValidSeverity 	: INT;

    {attribute 'pytmc' := '
        pv: EPICSLink
        link:
        field: DESC Internal variable used to monitor EPICS PV in PLC
    '}
    fPLCInternalValue : LREAL;

    // Use special link syntax for now to get EPICSLink.SEVR here:
    {attribute 'pytmc' := '
        pv: EPICSLink:LinkSeverity
        link: *EPICSLink.SEVR
        field: DESC Internal variable used to monitor EPICS PV severity in PLC
    '}
    nPLCInternalSeverity : INT;

END_VAR
VAR CONSTANT
    // The timeout will trip after `tTimeout` if EPICS doesn't write in that time period:
    ctTimeout			: TIME := T#2S;
    cnNAN_VALUE   		: ULINT := 16#7f_ff_ff_ff__ff_ff_ff_ff;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[pnValueInvalidate := ADR(fPLCInternalValue);

IF nPLCInternalSeverity <> -1 THEN
    // New severity value
    nLastValidSeverity := nPLCInternalSeverity;
    nPLCInternalSeverity := -1;

     // Reset the timer
    fbSeverityTimeout(IN:=FALSE);
    fbSeverityTimeout(IN:=TRUE, PT:=ctTimeout);
END_IF

IF pnValueInvalidate^ <> cnNAN_VALUE THEN
    // New value from EPICS
    fLastValidValue 	:= fPLCInternalValue;
    pnValueInvalidate^	:= cnNAN_VALUE;

    // Reset the timer
    fbValueTimeout(IN:=FALSE);
    fbValueTimeout(IN:=TRUE, PT:=ctTimeout);
END_IF

fbValueTimeout();
fbSeverityTimeout();
bValid := (NOT fbValueTimeout.Q) AND
          (NOT fbSeverityTimeout.Q) AND
          (nLastValidSeverity <= nMaximumValidSeverity);
fValue := fLastValidValue;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>