<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ECATAutoRestart_Test" Id="{3dfecdc7-d0c7-4db8-97bb-f11223a3cbe7}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_ECATAutoRestart_Test EXTENDS TcUnit.FB_TestSuite
VAR
    fbECATAutoRestart : FB_ECATAutoRestart;

    fbTON_TestTimer		: TON;
    bStartTest			: BOOL := FALSE;


END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
TestSingleLogPerTransitionExpect4Logs();
TestAnyStateExpectChangeToOpStateInSeq();
TestNotEnabledExpectNoStateChange();
Test5RetriesExpectErrorStopTrying();
TestBadAddressExpectError();]]></ST>
    </Implementation>
    <Method Name="Test5RetriesExpectErrorStopTrying" Id="{b66e006d-7ce0-42e5-9d35-e4a5f864d2fd}">
      <Declaration><![CDATA[
METHOD Test5RetriesExpectErrorStopTrying
VAR_INPUT
END_VAR
VAR
    nIndex                  : INT;
    nStateMachineState      : INT;

    // State Machine Control Inputs
    bEnable                 : BOOL;
    bfbGetBusy              : BOOL;
    bfbGetError              : BOOL;
    nCurretState            : WORD;
    bfbSetBusy              : BOOL;
    bfbSetError             : BOOL;

    // State Machine Control Outputs
    bfbGetUpdatedState      : BOOL;
    bSetNextState           : BOOL;
    nNextState              : WORD;
    sLogMessage             : T_MaxString;
    bLog                    : BOOL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test5RetriesExpectErrorStopTrying');

nStateMachineState := 1; // Start Test on Start State
bEnable := TRUE;
bfbGetBusy := FALSE;
bfbGetError := FALSE;
nCurretState := EC_DEVICE_STATE_PREOP;
bfbSetBusy := FALSE;
bfbSetError := TRUE;

FOR nIndex := 1 TO 20 DO
    fbECATAutoRestart.StateMachine(bEnable:=bEnable,
        bfbGetBusy := bfbGetBusy,
        bfbGetError := bfbGetError,
        bfbGetUpdatedState => bfbGetUpdatedState,
        nCurretState := nCurretState,
        nNextState => nNextState,
        sLogMessage=> sLogMessage,
        bLog=> bLog,
        bSetNextState=> bSetNextState,
        bfbSetBusy := bfbSetBusy,
        bfbSetError := bfbSetError);
END_FOR


AssertEquals_BOOL(Expected:=TRUE,
                    Actual:= fbECATAutoRestart.bStopTrying,
                    Message:='bStopTrying was not set after trying to get new position after 20 Cycles');

// CLEAR ANY ERRORS AFTER TESTS
FOR nIndex := 1 TO 3 DO
    fbECATAutoRestart.StateMachine(bEnable:=FALSE,
        bfbGetBusy := bfbGetBusy,
        bfbGetError := bfbGetError,
        bfbGetUpdatedState => bfbGetUpdatedState,
        nCurretState := nCurretState,
        nNextState => nNextState,
        sLogMessage=> sLogMessage,
        bLog=> bLog,
        bSetNextState=> bSetNextState,
        bfbSetBusy := bfbSetBusy,
        bfbSetError := bfbSetError);
END_FOR

TEST_FINISHED();


]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestAnyStateExpectChangeToOpStateInSeq" Id="{fcb64ba6-968c-48ac-bde3-1a76fba37031}">
      <Declaration><![CDATA[
METHOD TestAnyStateExpectChangeToOpStateInSeq
VAR_INPUT
END_VAR
VAR

    // State Machine Control Inputs
    bEnable                 : BOOL;
    bfbGetBusy              : BOOL;
    bfbGetError				: BOOL;
    nCurretState            : WORD;
    bfbSetBusy              : BOOL;
    bfbSetError             : BOOL;

    // State Machine Control Outputs
    bfbGetUpdatedState      : BOOL;
    bSetNextState           : BOOL;
    nNextState              : WORD;
    sLogMessage             : T_MaxString;
    bLog                    : BOOL;
    // TestAnyStateChangeOpInSeq Vars

    nIndex          : INT := 1;
    aPossibleStart : ARRAY [1 .. 4] OF BYTE := [EC_DEVICE_STATE_BOOTSTRAP,
                                                EC_DEVICE_STATE_INIT,
                                                EC_DEVICE_STATE_PREOP,
                                                EC_DEVICE_STATE_SAFEOP];
    nStartIndex : INT := 0;


END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestAnyStateExpectChangeToOpStateInSeq');


bEnable := TRUE;
bfbGetBusy := FALSE;
bfbSetBusy := FALSE;
bfbSetError := FALSE;
bfbGetError := FALSE;




FOR nStartIndex := 1 TO 4 DO
    nCurretState := aPossibleStart[nStartIndex];
    // Takes 3 cycles for statemachine to update state
    // 4 - nStartIndex is number of steps needed to return to OP
    FOR nIndex := 1 TO 3 * 4 - nStartIndex DO
    fbECATAutoRestart.StateMachine
            (bEnable:=bEnable,
            bfbGetBusy := bfbGetBusy,
            bfbGetError := bfbGetError,
            bfbGetUpdatedState => bfbGetUpdatedState,
            nCurretState := nCurretState,
            nNextState => nNextState,
            sLogMessage=> sLogMessage,
            bLog=> bLog,
            bSetNextState=> bSetNextState,
            bfbSetBusy := bfbSetBusy,
            bfbSetError := bfbSetError);

    IF bSetNextState THEN
        nCurretState := nNextState;
    END_IF
    END_FOR

    AssertEquals_BYTE(Expected:=EC_DEVICE_STATE_OP,
        Actual:= TO_BYTE(nCurretState),
        Message:='Test Did not Return to OP');
END_FOR

 TEST_FINISHED();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestBadAddressExpectError" Id="{160b4a58-d304-419d-9ea8-d4ffaa39fa3e}">
      <Declaration><![CDATA[
METHOD TestBadAddressExpectError
VAR_INPUT
END_VAR
VAR
    bError				: BOOL;
    bErrorId			: UDINT;
    nIndex				: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestBadAddressExpectError');

FOR nIndex := 1 TO 6 DO

    fbECATAutoRestart(sNetId:='1.0.0.0.1',
                    nSlaveAddr:=11101,
                    bEnable:= TRUE,
                    bError=>bError,
                    nErrorId=>bErrorId);


    IF bError THEN
    AssertEquals_BOOL(Expected:=TRUE,
        Actual:=bError,
        Message:= 'Expected bError to be TRUE');

    AssertEquals_UDINT(Expected:= 7,
        Actual:= bErrorId,
        Message:= 'Expected ERR_TARGETMACHINENOTFOUND (0x7)');

    END_IF
END_FOR

   TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestNotEnabledExpectNoStateChange" Id="{f686e19f-d49d-4fd6-b668-a90a4b41d91c}">
      <Declaration><![CDATA[
METHOD TestNotEnabledExpectNoStateChange
VAR_INPUT
END_VAR
VAR
    nStateMachineStartState      : INT;
    // State Machine Control Inputs
    bEnable                 : BOOL;
    bfbGetBusy              : BOOL;
    bfbGetError				: BOOL;
    nCurretState            : WORD;
    bfbSetBusy              : BOOL;
    bfbSetError             : BOOL;

    // State Machine Control Outputs
    bfbGetUpdatedState      : BOOL;
    bSetNextState           : BOOL;
    nNextState              : WORD;
    sLogMessage             : T_MaxString;
    bLog                    : BOOL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestNotEnabledExpectNoStateChange');

nStateMachineStartState := 1;
bEnable := FALSE;
bfbGetBusy := FALSE;
nCurretState := EC_DEVICE_STATE_PREOP;
bfbSetBusy := FALSE;
bfbSetError := TRUE;
bfbGetError := FALSE;

fbECATAutoRestart.StateMachine(bEnable:=bEnable,
    bfbGetBusy := bfbGetBusy,
    bfbGetError	:= bfbGetError,
    bfbGetUpdatedState => bfbGetUpdatedState,
    nCurretState := nCurretState,
    nNextState => nNextState,
    sLogMessage=> sLogMessage,
    bLog=> bLog,
    bSetNextState=> bSetNextState,
    bfbSetBusy := bfbSetBusy,
    bfbSetError := bfbSetError);


AssertEquals_WORD(Expected:= 0,
                    Actual:= nNextState,
                    Message:= 'When bEnable is False, nNextState should not return anything');

TEST_FINISHED();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSingleLogPerTransitionExpect4Logs" Id="{6bff341b-6186-4534-a454-b9503897cacd}">
      <Declaration><![CDATA[METHOD TestSingleLogPerTransitionExpect4Logs
VAR_INPUT
END_VAR

VAR
        // State Machine Control Inputs
    bEnable                 : BOOL;
    bfbGetBusy              : BOOL;
    nCurretState            : WORD;
    bfbSetBusy              : BOOL;
    bfbSetError             : BOOL;
    bfbGetError				: BOOL;

    // State Machine Control Outputs
    bfbGetUpdatedState      : BOOL;
    bSetNextState           : BOOL;
    nNextState              : WORD;
    sLogMessage             : T_MaxString;
    bLog                    : BOOL;

    nIndex          : INT := 1;
    nLogCount       : INT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestSingleLogPerTransitionExpect4Logs');

fbTON_TestTimer(IN:=bStartTest,PT:=T#1s);
IF  NOT bStartTest THEN bStartTest := TRUE; END_IF

bEnable := TRUE;
bfbGetBusy := FALSE;
bfbSetBusy := FALSE;
bfbSetError := FALSE;
bfbGetError := FALSE;

nCurretState := EC_DEVICE_STATE_INIT;
// Using More cyles then needed
 FOR nIndex := 1 TO 3 * 4 DO
    fbECATAutoRestart.StateMachine
            (bEnable:=bEnable,
            bfbGetBusy := bfbGetBusy,
            bfbGetError := bfbGetError,
            bfbGetUpdatedState => bfbGetUpdatedState,
            nCurretState := nCurretState,
            nNextState => nNextState,
            sLogMessage=> sLogMessage,
            bLog=> bLog,
            bSetNextState=> bSetNextState,
            bfbSetBusy := bfbSetBusy,
            bfbSetError := bfbSetError);

    IF bLog THEN
        nLogCount := nLogCount + 1;
    END_IF
END_FOR

AssertEquals_INT(Expected:= 4,
    Actual:=nLogCount,
    Message:='More than 4 Logs where Produced');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>